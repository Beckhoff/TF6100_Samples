<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="PRG_HA_SingleNode" Id="{fce75bf9-8c13-44e6-a03d-58b2db280665}" SpecialFunc="None">
    <Declaration><![CDATA[//| use case:
//| One variable is specified for historical access. 
//| Its values of each task cycle should be updated to data storage.
PROGRAM PRG_HA_SingleNode
VAR CONSTANT
	// These connection and namespace settings need to be adapted to the runtime environment
	cOpcUaServerUrl		: STRING(MAX_STRING_LENGTH) := 'opc.tcp://localhost:4840';
	cNamespaceUri		: STRING(MAX_STRING_LENGTH) := 'urn:BeckhoffAutomation:Ua:PLC1';
	cBufferSize			: UINT := 1000;
END_VAR
VAR
	// Variable for HistorcalAccess
	{attribute 'OPC.UA.DA' := '1'}
	nMyValue : INT;	
	
	// state machine declarations 
	nState					: INT;
	bStart					: BOOL;			//Set True to start this sample.
	bSample					: BOOL := TRUE;	//Set True if data should be sampled.
	bStop					: BOOL;			//Set True to stop the sampling and close the connection afterwards.
	bError					: BOOL;
	nErrorID				: DWORD;
	
	// Declarations for UA_Connect
	fbUAConnect				: UA_Connect;
	stSessionConnectInfo 	: ST_UASessionConnectInfo;
	nConnectionHdl			: DWORD;
	
	// Declarations for UA_GetNamespaceIndex
	fbUAGetNamespaceIndex	: UA_GetNamespaceIndex;
	nNamespaceIndex			: UINT;
	
	// Declarations for UA_NodeGetHandle
	fbUANodeGetHandle		: UA_NodeGetHandle;
	sNodeIdentifier			: STRING(MAX_STRING_LENGTH) := 'PRG_HA_SingleNode.nMyValue'; // change to node identifier
	NodeID					: ST_UANodeID;
	nNodeHdl				: DWORD;
	
	// Declarations for UA_HistoryUpdate
	fbUAHistoryUpdate		: UA_HistoryUpdate;
	aDataValues				: ARRAY [1..cBufferSize] OF UAHADataValue(ValueSize:=SIZEOF(nMyValue));
	aValueErrorIDs			: ARRAY [1..cBufferSize] OF DWORD;
	nCounter				: UINT := 1;
	
	// Declarations for UA_NodeReleaseHandle
	fbUANodeReleaseHandle	: UA_NodeReleaseHandle;
	
	// Declarations for UA_Disconnect
	fbUADisconnect			: UA_Disconnect;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[nMyValue := nMyValue + 1;

CASE nState OF
0:	//Idle
	IF bStart THEN  // the opc ua server need to be startet
		bStart				:= FALSE;
		bError				:= FALSE;
		nErrorID			:= 0;
		nCounter			:= 1;

		stSessionConnectInfo.tConnectTimeout 		:= T#1M;
		stSessionConnectInfo.tSessionTimeout 		:= T#1M;
		stSessionConnectInfo.sApplicationName		:= '';
		stSessionConnectInfo.eSecurityMode 			:= eUASecurityMsgMode_None;
		stSessionConnectInfo.eSecurityPolicyUri 	:= eUASecurityPolicy_None;
		stSessionConnectInfo.eTransportProfileUri	:= eUATransportProfileUri_UATcp;
		
		nState := 1;
	END_IF

1: //Open UA Session
	fbUAConnect(	Execute 			:= TRUE,
					ServerUrl			:= cOpcUaServerUrl,
					SessionConnectInfo	:= stSessionConnectInfo,
					Timeout				:= T#5S,
					ConnectionHdl 		=> nConnectionHdl );
		
	IF NOT fbUAConnect.Busy THEN
		IF NOT fbUAConnect.Error THEN
			nState 			:= 2;
		ELSE
			bError 			:= TRUE;
			nErrorID		:= fbUAConnect.ErrorID;
			nConnectionHdl 	:= 0;
			nState 			:= 0; //Idle
		END_IF
		fbUAConnect(Execute := FALSE);
	END_IF

2: //Get NS Index
	fbUAGetNamespaceIndex(	Execute 			:= TRUE,
							ConnectionHdl		:= nConnectionHdl,
							NamespaceUri		:= cNamespaceUri,
							NamespaceIndex		=> nNamespaceIndex );
		
	IF NOT fbUAGetNamespaceIndex.Busy THEN
		IF NOT fbUAGetNamespaceIndex.Error THEN
			nState 			:= 3;
		ELSE
			bError 			:= TRUE;
			nErrorID		:= fbUAGetNamespaceIndex.ErrorID;
			nState			:= 6; //Close Connection
		END_IF
		fbUAGetNamespaceIndex(Execute := FALSE);
	END_IF
	
3: //Get Node Handle
	NodeID.eIdentifierType 	:= eUAIdentifierType_String;
	NodeID.nNamespaceIndex 	:= nNamespaceIndex;
	NodeID.sIdentifier		:= sNodeIdentifier;
	
	fbUANodeGetHandle(	Execute 			:= TRUE,
						ConnectionHdl 		:= nConnectionHdl,
						NodeID 				:= NodeID,
						NodeHdl				=> nNodeHdl );
		
	IF NOT fbUANodeGetHandle.Busy THEN
		IF NOT fbUANodeGetHandle.Error THEN
			nState 			:= 4;
		ELSE
			bError  		:= TRUE;
			nErrorID 		:= fbUANodeGetHandle.ErrorID;
			nState 			:= 6; //Close Connection
		END_IF
		fbUANodeGetHandle(Execute := FALSE);
	END_IF
	
4: //UA_HistoryUpdate
	IF bSample THEN
		aDataValues[nCounter].Value				:= ADR(nMyValue);
		aDataValues[nCounter].StatusCode 		:= UAHAUpdateStatusCode.HistorianRaw;
		aDataValues[nCounter].ServerTimeStamp 	:= F_GetSystemTime();
		aDataValues[nCounter].SourceTimeStamp 	:= aDataValues[nCounter].ServerTimeStamp;	
		nCounter := nCounter + 1;
		
		IF nCounter > cBufferSize THEN
			fbUAHistoryUpdate.Execute := TRUE;
			nCounter := 1;
		END_IF
	END_IF
	
	fbUAHistoryUpdate(	Execute 			:= , //already set above
						ConnectionHdl 		:= nConnectionHdl,
						NodeHdl 			:= nNodeHdl,
						PerformInsert 		:= TRUE,
						PerformReplace 		:= FALSE,
						DataValueCount 		:= cBufferSize,
						DataValues	 		:= aDataValues,
						ValueErrorIDs 		:= aValueErrorIDs );
						
	IF NOT fbUAHistoryUpdate.Busy THEN
		IF NOT fbUAHistoryUpdate.Error THEN 
			IF bStop THEN
				bStop		:= FALSE;
				nState 		:= 5;
			END_IF
		ELSE
			bError 			:= TRUE;
			nErrorID 		:= fbUAHistoryUpdate.ErrorID;
			nState 			:= 5; //Release Node Handle
		END_IF
		fbUAHistoryUpdate(	Execute			:= FALSE, 			
							DataValues	 	:= aDataValues,
							ValueErrorIDs 	:= aValueErrorIDs);
	END_IF

5: //Release Node Handle
	fbUANodeReleaseHandle(	Execute 			:= TRUE,
							ConnectionHdl 		:= nConnectionHdl,
							NodeHdl 			:= nNodeHdl );
		
	IF NOT fbUANodeReleaseHandle.Busy THEN
		IF fbUANodeReleaseHandle.Error THEN
			bError 		:= TRUE;
			nErrorID 	:= fbUANodeReleaseHandle.ErrorID;
		END_IF
		fbUANodeReleaseHandle(Execute := FALSE);
		nState 			:= 6; //Close Connection
	END_IF

6: //Close Session
	fbUADisconnect( Execute := TRUE, ConnectionHdl := nConnectionHdl );
		
	IF NOT fbUADisconnect.Busy THEN
		IF fbUADisconnect.Error THEN
			bError 			:= TRUE;
			nErrorID 		:= fbUADisconnect.ErrorID;
			nConnectionHdl 	:= 0;
		END_IF
		fbUADisconnect(Execute := FALSE);
		nState := 0;
	END_IF
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="PRG_HA_SingleNode">
      <LineId Id="523" Count="3" />
      <LineId Id="528" Count="16" />
      <LineId Id="546" Count="18" />
      <LineId Id="566" Count="16" />
      <LineId Id="584" Count="20" />
      <LineId Id="789" Count="0" />
      <LineId Id="924" Count="0" />
      <LineId Id="791" Count="2" />
      <LineId Id="795" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="917" Count="0" />
      <LineId Id="922" Count="1" />
      <LineId Id="916" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="625" Count="11" />
      <LineId Id="638" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="639" Count="6" />
      <LineId Id="732" Count="1" />
      <LineId Id="646" Count="3" />
      <LineId Id="651" Count="13" />
      <LineId Id="666" Count="11" />
      <LineId Id="463" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>