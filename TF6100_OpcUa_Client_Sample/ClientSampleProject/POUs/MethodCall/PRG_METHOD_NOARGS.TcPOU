<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_METHOD_NOARGS" Id="{ffd5aebc-a36d-4093-929b-2aba157c3356}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_METHOD_NOARGS
VAR
	(* Declarations for UA_Connect *)	
	fbUA_Connect: UA_Connect;
	SessionConnectInfo: ST_UASessionConnectInfo;
	nConnectionHdl: DWORD;
	
	(* Declarations for UA_GetNamespaceIndex *)
	fbUA_GetNamespaceIndex: UA_GetNamespaceIndex;
	nNamespaceIndex: UINT;
	
	(* Declarations for UA_MethodGetHandle *)
	fbUA_MethodGetHandle: UA_MethodGetHandle;
	ObjectNodeID: ST_UANodeID;
	MethodNodeID: ST_UANodeID;
	nMethodHdl: DWORD;
	
	(* Declarations for UA_MethodCall *)
	fbUA_MethodCall: UA_MethodCall;
	sObjectNodeIdIdentifier	: STRING(MAX_STRING_LENGTH) := 'MAIN.fbMathematics'; // change to object node identifier (UAObject above method)
	sMethodNodeIdIdentifier : STRING(MAX_STRING_LENGTH) := 'MAIN.fbMathematics#M_NoArgs'; // change to method node identifier (UAMethod to call)

	stOutputArgInfoAndData: ST_OutputArgInfoAndData;

	(* Declarations for UA_MethodReleaseHandle *)
	fbUA_MethodReleaseHandle: UA_MethodReleaseHandle;

	(* Declarations for UA_Disconnect *)
	fbUA_Disconnect: UA_Disconnect;
			
	(* Other Declarations *)
	bTest: BOOL := TRUE;
	bDone: BOOL;
	bBusy: BOOL;
	bError: BOOL;
	nErrorID: DWORD;
	iState: INT;
	bInputDataError: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iState OF

0:	(* idle *)
	IF bTest THEN
		bTest		:= FALSE;
		bError		:= FALSE;
		nErrorID	:= 0;

		SessionConnectInfo.tConnectTimeout 		:= T#1M;
		SessionConnectInfo.tSessionTimeout 		:= T#1M;
		SessionConnectInfo.sApplicationName		:= '';
		SessionConnectInfo.eSecurityMode 		:= eUASecurityMsgMode_Sign_Encrypt;
		SessionConnectInfo.eSecurityPolicyUri 	:= eUASecurityPolicy_Basic256Sha256;
		SessionConnectInfo.eTransportProfileUri := eUATransportProfileUri_UATcp;

		(* Please note: when connecting to newer versions of the TwinCAT OPC UA Server,
		a server initialization is required, which basically activates username/password
		authentication for every client connection. Please set the corresponding username/password
		in stUserIdentTokenType as shown below. *)
		
		(* Please note: in order to successfully connect to the server, you need to trust the  
		server certificate. Simply move the server certificate from the "PKI\CA\rejected" to the 
		"PKI\CA\trusted" folder after the first connection. *)
 		
		(*
		SessionConnectInfo.stUserIdentTokenType.eUserIdentTokenType := eUAUITT_Username;
		SessionConnectInfo.stUserIdentTokenType.sTokenParam1 := 'Administrator';
		SessionConnectInfo.stUserIdentTokenType.sTokenParam2 := 'SomeSecurePassword';
		*)	

		iState	:= iState + 1;
	END_IF

	
1:	(* open UA session *)
	fbUA_Connect(
		Execute				:= TRUE,
		ServerURL			:= sOpcUaServerUrl,
		SessionConnectInfo	:= SessionConnectInfo,
		Timeout				:= T#2M,
		ConnectionHdl		=> nConnectionHdl
	);

	IF NOT fbUA_Connect.Busy THEN
		fbUA_Connect(Execute := FALSE);

		IF NOT fbUA_Connect.Error THEN
			(* connected *)
			iState := iState + 1;
		ELSE
			bError			:= TRUE;
			nErrorID		:= fbUA_Connect.ErrorID;
			nConnectionHdl	:= 0;
			iState 			:= 0; (* idle *)
		END_IF
	END_IF


2:	(* GetNS Index *)
	fbUA_GetNamespaceIndex(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		NamespaceUri	:= sNamespaceUri,
		NamespaceIndex	=> nNamespaceIndex
	);

	IF NOT fbUA_GetNamespaceIndex.Busy THEN
		fbUA_GetNamespaceIndex(Execute := FALSE);

		IF NOT fbUA_GetNamespaceIndex.Error THEN
			(* namespace index read successfully *)
			iState 		:= iState + 1;
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_GetNamespaceIndex.ErrorID;
			iState 		:= 7; (* disconnect *)
		END_IF
	END_IF

	
3:	(* Get Method Handle *)
	ObjectNodeID.eIdentifierType := eUAIdentifierType_String;
	ObjectNodeID.nNamespaceIndex := nNamespaceIndex;
	ObjectNodeID.sIdentifier	 := sObjectNodeIdIdentifier;

	MethodNodeID.eIdentifierType := eUAIdentifierType_String;
	MethodNodeID.nNamespaceIndex := nNamespaceIndex;
	MethodNodeID.sIdentifier	 := sMethodNodeIdIdentifier;

	IF bInputDataError = FALSE THEN
		iState 	:= iState + 1;
	ELSE
		bBusy		:= FALSE;  
		bError 		:= TRUE;
		nErrorID 	:= 16#70A; //out of memory
	END_IF

	
4:	(* Method Get Handle *)
	fbUA_MethodGetHandle(
			Execute			:= TRUE,
			ConnectionHdl	:= nConnectionHdl,
			ObjectNodeID	:= ObjectNodeID,
			MethodNodeID 	:= MethodNodeID,
			MethodHdl		=> nMethodHdl
		);
	IF NOT fbUA_MethodGetHandle.Busy THEN
		fbUA_MethodGetHandle(Execute := FALSE);

		IF NOT fbUA_MethodGetHandle.Error THEN
			(*  *)
			iState := iState + 1; (* Call Method *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_MethodGetHandle.ErrorID;
			iState	 	:= 6; (* Release method Handle *)
		END_IF
	END_IF


5:	(* Method Call *)

	(* When calling a method without any input or output arguments, the status code of the method call has to be processed anyway.
    Therefore, there has to be stOutputArgInfoAndData even if there is no output argument in the method itself.*) 
	fbUA_MethodCall(
		Execute					:= TRUE,
		ConnectionHdl			:= nConnectionHdl,
		MethodHdl				:= nMethodHdl,
		nNumberOfInputArguments := 0,	
		pInputArgInfo			:= 0,
		cbInputArgInfo			:= 0,
		pInputArgData			:= 0,
		cbInputArgData			:= 0,
		pInputWriteData			:= 0,
		cbInputWriteData		:= 0,
		nNumberOfOutputArguments:= 0,
		pOutputArgInfo			:= 0,
		cbOutputArgInfo			:= 0,
		pOutputArgInfoAndData	:= ADR(stOutputArgInfoAndData),
		cbOutputArgInfoAndData	:= SIZEOF(stOutputArgInfoAndData)		
	);
	IF NOT fbUA_MethodCall.Busy THEN
		fbUA_MethodCall(Execute := FALSE);
		IF NOT fbUA_MethodCall.Error THEN
			(* clear data and restart *)
			iState := iState + 1; (* Release handle *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_MethodCall.ErrorID;
			iState		:= 6; (* Release method handle *)
		END_IF
	END_IF


6:	(* Release Method Handle *)
	fbUA_MethodReleaseHandle(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		MethodHdl		:= nMethodHdl
	);

	IF NOT fbUA_MethodReleaseHandle.Busy THEN
		fbUA_MethodReleaseHandle(Execute := FALSE);
		bBusy := FALSE;
		IF NOT fbUA_MethodReleaseHandle.Error THEN
			(* session closed *)
			iState 	:= 7; (* Disconnect *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_MethodReleaseHandle.ErrorID;
			iState 		:= 7; (* Disconnect *)
		END_IF
	END_IF
	
	
7:	(* Disconnect *) 
	fbUA_Disconnect(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl
	);

	IF NOT fbUA_Disconnect.Busy THEN
		fbUA_Disconnect(Execute := FALSE);

		IF NOT fbUA_Disconnect.Error THEN
			(* disconnected *)
			iState 	:= 0; (* idle *)
			bDone 	:= TRUE;
			bBusy 	:= FALSE;
		ELSE
			bBusy 			:= FALSE;
			bError			:= TRUE;
			nErrorID		:= fbUA_Disconnect.ErrorID;
			iState 			:= 0; (* idle *)
			nConnectionHdl	:= 0;
		END_IF
	END_IF
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="PRG_METHOD_NOARGS">
      <LineId Id="1" Count="23" />
      <LineId Id="208" Count="4" />
      <LineId Id="214" Count="0" />
      <LineId Id="30" Count="90" />
      <LineId Id="222" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="123" Count="13" />
      <LineId Id="203" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="139" Count="5" />
      <LineId Id="146" Count="52" />
    </LineIds>
  </POU>
</TcPlcObject>