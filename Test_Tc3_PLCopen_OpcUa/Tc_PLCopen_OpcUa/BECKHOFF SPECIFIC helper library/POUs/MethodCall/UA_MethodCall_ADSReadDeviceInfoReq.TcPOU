<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="UA_MethodCall_ADSReadDeviceInfoReq" Id="{5ffb204d-cc44-4e65-933c-91b502a8530e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK UA_MethodCall_ADSReadDeviceInfoReq
VAR_INPUT
	bExecute			: BOOL;
	nConnectionHdl		: DWORD;
	nNamespaceIndex		: UINT; 			(* to be retrieved using UA_GetNamespaceIndex *)
	sNetID				: T_AmsNetId; 		(* AmsNetId OF the Target *)
	nPort				: INT; 				(* Port number	*)
	Timeout				: TIME := DEFAULT_ADS_TIMEOUT;
END_VAR
VAR_OUTPUT
	sDeviceName			: STRING(19);	(* DeviceName *)
	nVersion			: SINT;			(* Version *)
	nRevision			: SINT;			(* Revision *)
	nBuild				: INT;			(* Build *)
	cbReadData_R		: UDINT; 
	bDone				: BOOL;
	bBusy				: BOOL;
	bError				: BOOL;
	nErrorID			: DWORD;
END_VAR
VAR
	iReadDeviceInfoState	: INT;
	RTrig					: R_TRIG;

	fbUA_MethodGetHandle	: UA_MethodGetHandle;
	nMethodHdl				: DWORD;
	ObjectNodeID			: ST_UANodeID;
	MethodNodeID			: ST_UANodeID;

	fbUA_MethodCall			: UA_MethodCall;
	InputArguments			: ARRAY [1..nNumberOfInputArguments] OF ST_UAMethodArgInfo; (*ReadDeviceInfoReq has 2 input parameters *)
	stOutputArgInfoAndData	: ST_UAMethodCall_AdsReadDeviceInfoRes;
	
	nArg					: INT;
	stOutputArgInfo			: ARRAY [1..nNumberOfOutputArguments] OF ST_UAMethodArgInfo;
	
	fbUA_MethodReleaseHandle	: UA_MethodReleaseHandle;

	nInputData			: ARRAY [1..nInputArgSize] OF BYTE; (* NetID (24) + Port (2) *)
	nOffset				: UDINT;
	nOffsetOutputData	: UDINT := 0; 
	bInputDataError		: BOOL; 
END_VAR
VAR CONSTANT
	nInputArgSize				: UDINT := 26; (* NetID (24) + Port (2) *)
	nNumberOfInputArguments 	: UDINT := 2;
	nNumberOfOutputArguments 	: UDINT := 4;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
ADSReadDeviceInfoReq(
******** Input Arguments ********
	string sNetID, 		: AmsNetId of the Target
	int16 Port,			: Port number	
	
******** Output Arguments ********
	string DeviceName,		: Device name
	byte Version,			: Version
	byte Revision			: Revision
	int16 Build			: Build
);
*)
RTrig(CLK:= bExecute);

CASE iReadDeviceInfoState OF

0:	(* Get Method Handle *)
	IF RTrig.Q THEN
		bInputDataError := FALSE; 
		bBusy		:= TRUE;
		bDone 		:= FALSE;
		bError		:= FALSE;
		nErrorID	:= 0;
		ObjectNodeID.eIdentifierType 	:= eUAIdentifierType_String;
		ObjectNodeID.nNamespaceIndex 	:= nNamespaceIndex;
		ObjectNodeID.sIdentifier		:= 'ADSAMS';
	
		MethodNodeID.eIdentifierType 	:= eUAIdentifierType_String;
		MethodNodeID.nNamespaceIndex 	:= nNamespaceIndex;
		MethodNodeID.sIdentifier		:= 'ADSAMS.AdsReadDeviceInfoReq';

		M_Init();
		IF bInputDataError = FALSE THEN
			iReadDeviceInfoState 	:= iReadDeviceInfoState + 1;
		ELSE
			bBusy 		:= FALSE; 
			bError 		:= TRUE;
			nErrorID 	:= DEVICE_INVALIDSIZE; //16#705 parameter size not correct
		END_IF
		sDeviceName		:= '';		(* ADS state *)
		nVersion		:= 0;		(* Device state *)
		nRevision		:= 0;
		nBuild			:= 0;
	END_IF


1:	(* Method Get Handle *)
	fbUA_MethodGetHandle(
			Execute			:= TRUE,
			ConnectionHdl	:= nConnectionHdl,
			ObjectNodeID	:= ObjectNodeID,
			MethodNodeID 	:= MethodNodeID,
			Timeout			:= Timeout,
			MethodHdl		=> nMethodHdl
		);
	IF NOT fbUA_MethodGetHandle.Busy THEN
		fbUA_MethodGetHandle(Execute := FALSE);

		IF NOT fbUA_MethodGetHandle.Error THEN
			(*  *)
			iReadDeviceInfoState 	:= iReadDeviceInfoState + 1; (* Call Method *)
		ELSE
			bError				:= TRUE;
			nErrorID			:= fbUA_MethodGetHandle.ErrorID;
			iReadDeviceInfoState:= 3; (* Release Handle *)
		END_IF
	END_IF


2:	(* Method Call *)
	fbUA_MethodCall(
		Execute					:= TRUE,
		ConnectionHdl			:= nConnectionHdl,
		MethodHdl				:= nMethodHdl,
		nNumberOfInputArguments := nNumberOfInputArguments,		(* 6 *)
		pInputArgInfo			:= ADR(InputArguments),
		cbInputArgInfo			:= SIZEOF(InputArguments),
		pInputArgData			:= ADR(nInputData),
		cbInputArgData			:= nOffset,
		pInputWriteData			:= 0,
		cbInputWriteData		:= 0,
		nNumberOfOutputArguments:= nNumberOfOutputArguments,	(* 4 *)
		pOutputArgInfo			:= ADR(stOutputArgInfo),
		cbOutputArgInfo			:= SIZEOF(stOutputArgInfo),
		pOutputArgInfoAndData	:= ADR(stOutputArgInfoAndData),
		cbOutputArgInfoAndData	:= SIZEOF(stOutputArgInfoAndData),
		Timeout					:= Timeout
	);
	IF NOT fbUA_MethodCall.Busy THEN
		fbUA_MethodCall(Execute := FALSE, cbRead_R => cbReadData_R);
		nOffsetOutputData := 0; 
		IF NOT fbUA_MethodCall.Error THEN
			(*  *)
			iReadDeviceInfoState:= iReadDeviceInfoState + 1; (* Release handle *)
			sDeviceName 		:= stOutputArgInfoAndData.stDeviceInfo.sDeviceName;
			nVersion   			:= stOutputArgInfoAndData.stDeviceInfo.nVersion;
			nRevision  			:= stOutputArgInfoAndData.stDeviceInfo.nRevision;
			nBuild     			:= stOutputArgInfoAndData.stDeviceInfo.nBuild;
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_MethodCall.ErrorID;
			iReadDeviceInfoState:= 3; (* Release handle *)
		END_IF
	END_IF


3:	(* Release Method Handle *)
	fbUA_MethodReleaseHandle(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		MethodHdl		:= nMethodHdl,
		Timeout			:= Timeout
	);

	IF NOT fbUA_MethodReleaseHandle.Busy THEN
		fbUA_MethodReleaseHandle(Execute := FALSE);
		bBusy := FALSE;
		IF NOT fbUA_MethodReleaseHandle.Error THEN
			(* session closed *)
			bDone := TRUE;
			iReadDeviceInfoState 	:= 0; (* idle *)
		ELSE
			bError				:= TRUE;
			nErrorID			:= fbUA_MethodReleaseHandle.ErrorID;
			iReadDeviceInfoState:= 0; (* idle *)
		END_IF
	END_IF
END_CASE

]]></ST>
    </Implementation>
    <Action Name="M_Init" Id="{f1d1b5f6-37de-4a4a-bc8f-101422408675}">
      <Implementation>
        <ST><![CDATA[bInputDataError := FALSE; 
nOffset := 0;
MEMSET(ADR(InputArguments),0,SIZEOF(InputArguments));
MEMSET(ADR(nInputData),0,SIZEOF(nInputData));

nArg := 1;
(*sNetID := sAmsNetID;*)	(********** NET ID **********)
InputArguments[nArg].DataType			:= eUAType_String;
InputArguments[nArg].ValueRank			:= -1; 						(* Scalar = -1 or Array *)
InputArguments[nArg].ArrayDimensions[1]	:= 0; 						(* Number of Dimension in case its an array *)
InputArguments[nArg].nLenData			:= INT_TO_UDINT(LEN(sNetId)) + 1;			(* Length if its a STRING *)
IF nOffset + INT_TO_UDINT(LEN(sNetId))+1 > nInputArgSize THEN 
	bInputDataError := TRUE;
	RETURN;
ELSE
	MEMCPY(ADR(nInputData)+nOffset,ADR(sNetId),INT_TO_UDINT(LEN(sNetId))+1);				(* VALUE in BYTES FORM *)
	nOffset := nOffset + INT_TO_UDINT(LEN(sNetId))+1;
END_IF

nArg := nArg + 1;
(* nPort := 851;*)			(********** PORT **********)
InputArguments[nArg].DataType			:= eUAType_Int16;
InputArguments[nArg].ValueRank			:= -1; 						(* Scalar = -1 or Array *)
InputArguments[nArg].ArrayDimensions[1]	:= 0; 						(* Number of Dimension in case its an array *)
InputArguments[nArg].nLenData			:= SIZEOF(nPort);			(* Length if its a STRING *)
IF nOffset + SIZEOF(nPort) > nInputArgSize THEN 
	bInputDataError := TRUE;
	RETURN;
ELSE
	MEMCPY(ADR(nInputData)+nOffset,ADR(nPort),SIZEOF(nPort));			(* VALUE in BYTES FORM *)
	nOffset := nOffset + SIZEOF(nPort);
END_IF

//************** Prepare Output Argument information ***********
stOutputArgInfo[1].nLenData := SIZEOF(sDeviceName);
stOutputArgInfo[2].nLenData := SIZEOF(nVersion); 
stOutputArgInfo[3].nLenData := SIZEOF(nRevision);
stOutputArgInfo[4].nLenData := SIZEOF(nBuild);]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="UA_MethodCall_ADSReadDeviceInfoReq">
      <LineId Id="3" Count="129" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="UA_MethodCall_ADSReadDeviceInfoReq.M_Init">
      <LineId Id="2" Count="36" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>