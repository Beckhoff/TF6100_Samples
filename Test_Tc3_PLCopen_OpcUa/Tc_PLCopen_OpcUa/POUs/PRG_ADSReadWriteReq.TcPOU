<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="PRG_ADSReadWriteReq" Id="{de8586fd-40f5-494d-84ce-1bf447127b80}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_ADSReadWriteReq
VAR
	fbUA_Connect			: UA_Connect;
	SessionConnectInfo		: ST_UASessionConnectInfo;
	sOpcUA_URL				: STRING(MAX_STRING_LENGTH);
	nConnectionHdl			: DWORD;

	fbUA_GetNamespaceIndex 	: UA_GetNamespaceIndex;
	nNamespaceIndex			: UINT;

	fbUA_NodeReleaseHandle	: UA_NodeReleaseHandle;
	
	fbUA_MethodCall_ADSReadWriteReq		: UA_MethodCall_ADSReadWriteReq;
	sHostname		: T_MaxString := 'PujaK-nb';	
	sAddr			: T_IPv4Addr 		:= '';(* String containing an (Ipv4) Internet Protocol dotted address. E.g. '172.16.7.199' *)
	//arrAddr			: T_IPv4AddrArr	:=[ 0, 0, 0, 0];(* Byte array containing an (Ipv4) Internet Protocol dotted address. *)
	//	ReadData		: ARRAY [1..5] OF BYTE;
	stADSReadWriteRes	: ST_ADSReadWriteRes; // T_IPv4AddrArr is to be found here
	stOutputArgInfo		: ST_UAMethodArgInfo;
	fbUA_Disconnect		: UA_Disconnect;
		
	bTest		: BOOL:= TRUE;
	bDone		: BOOL;
	bBusy		: BOOL;
	bError		: BOOL;
	nErrorID	: DWORD;
	iState		: INT;
END_VAR
VAR CONSTANT
	nNumberOfOutputArguments	: UDINT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
CASE iState OF
0:	(* idle *)
	IF bTest THEN
		bTest	:= FALSE;
		bError	:= FALSE;
		nErrorID	:= 0;

		(* Parameterize *)
		sOpcUA_URL								:= 'opc.tcp://Pujak-nb:4840';	(* OpcUA Url of the device with ip address *)

		SessionConnectInfo.tConnectTimeout 		:= T#5S;
		SessionConnectInfo.tSessionTimeout 		:= T#1S;
		SessionConnectInfo.sApplicationName		:= '';
//		SessionConnectInfo.sApplicationUri 		:= '';
		SessionConnectInfo.eSecurityMode 		:= eUASecurityMsgMode_None;
		SessionConnectInfo.eSecurityPolicyUri 	:= eUASecurityPolicy_None;
		SessionConnectInfo.eTransportProfileUri := eUATransportProfileUri_UATcp;

		iState	:= iState + 1;	(* open ua session *)
	END_IF

1:	(* open UA session *)
	fbUA_Connect(
		Execute				:= TRUE,
		ServerURL			:= sOpcUA_URL,
		SessionConnectInfo	:= SessionConnectInfo,
		Timeout				:= T#5S,
		ConnectionHdl		=> nConnectionHdl
	);

	IF NOT fbUA_Connect.Busy THEN
		fbUA_Connect(Execute := FALSE);

		IF NOT fbUA_Connect.Error THEN
			(* session open *)
			iState := iState + 1;	(* get namespace index *)
		ELSE
			bError			:= TRUE;
			nErrorID		:= fbUA_Connect.ErrorID;
			nConnectionHdl	:= 0;
			iState 			:= 0; (* idle *)
		END_IF
	END_IF


2:	(* GetNS Index *)
	fbUA_GetNamespaceIndex(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		NamespaceUri	:= 'ADSAMS',
		NamespaceIndex	=> nNamespaceIndex
	);

	IF NOT fbUA_GetNamespaceIndex.Busy THEN
		fbUA_GetNamespaceIndex(Execute := FALSE);

		IF NOT fbUA_GetNamespaceIndex.Error THEN
			(* session closed *)
			iState 		:= iState + 1; (* method *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_GetNamespaceIndex.ErrorID;
			iState 		:= 4; (* close session *)
		END_IF
	END_IF

3:	(*  Method  *)
	(*stOutputArgInfo.DataType := eUAType_ByteString;
	stOutputArgInfo.ValueRank := 1; 
	stOutputArgInfo.ArrayDimensions[1] := 4; *)
	stOutputArgInfo.nLenData := 4;//SIZEOF(stADSReadWriteRes.arrAddr);
	fbUA_MethodCall_ADSReadWriteReq(
		bExecute				:= TRUE,
		nConnectionHdl			:= nConnectionHdl,
		nNamespaceIndex			:= nNamespaceIndex,
		sNetID					:= sPujaNetID, //'127.0.0.1.1.1',
		nPort					:= UINT_TO_INT(AMSPORT_R3_SYSSERV),
		nIndexGroup				:= UDINT_TO_DINT(SYSTEMSERVICE_IPHELPERAPI), // 701
		nIndexOffset			:= UDINT_TO_DINT(IPHELPERAPI_IPADDRBYHOSTNAME), //4
		pWriteData 				:= ADR(sHostname),
		cbWriteData				:= INT_TO_UDINT( LEN( sHostName ) + 1),
		pReadArgInfoAndData		:= ADR(stADSReadWriteRes),
		cbReadArgInfoAndData	:= SIZEOF(stADSReadWriteRes),
		nNumberOfOutputArguments:= nNumberOfOutputArguments,
		pOutputArgInfo			:= ADR(stOutputArgInfo),
		cbOutputArgInfo			:= SIZEOF(stOutputArgInfo)		
		);

	IF NOT fbUA_MethodCall_ADSReadWriteReq.bBusy THEN
		fbUA_MethodCall_ADSReadWriteReq(bExecute := FALSE);
		IF NOT fbUA_MethodCall_ADSReadWriteReq.bError THEN
			(* session closed *)
			iState 		:= iState + 1; (* close session *)
			sAddr		:= F_CreateIPv4Addr( stADSReadWriteRes.arrAddr );
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_MethodCall_ADSReadWriteReq.nErrorID;
			iState 		:= 4; (* close session *)
		END_IF
	END_IF


4:	(* close session *)
	fbUA_Disconnect(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl
	);

	IF NOT fbUA_Disconnect.Busy THEN
		fbUA_Disconnect(Execute := FALSE);
		bBusy := FALSE;
		IF NOT fbUA_Disconnect.Error THEN
			(* session closed *)
			iState 		:= 0; (* idle *)
			IF NOT bError THEN 
				bDone 	:= TRUE;
			END_IF
		ELSE
			bError			:= TRUE;
			nErrorID		:= fbUA_Disconnect.ErrorID;
			iState 			:= 0; (* idle *)
			nConnectionHdl	:= 0;
		END_IF
	END_IF
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="PRG_ADSReadWriteReq">
      <LineId Id="3" Count="126" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>