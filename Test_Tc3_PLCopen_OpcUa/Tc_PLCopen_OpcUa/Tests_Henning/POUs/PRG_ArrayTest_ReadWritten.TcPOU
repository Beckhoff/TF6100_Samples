<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.24">
  <POU Name="PRG_ArrayTest_ReadWritten" Id="{e5b463af-8449-4cf2-8239-7cd31312c560}">
    <Declaration><![CDATA[PROGRAM PRG_ArrayTest_ReadWritten
VAR
	fbUA_Connect: UA_Connect;
	SessionConnectInfo: ST_UASessionConnectInfo;
	nConnectionHdl: DWORD;
	fbUA_GetNamespaceIndex: UA_GetNamespaceIndex;
	nNamespaceIndex: UINT;
	fbUA_NodeGetHandle: UA_NodeGetHandle;
	NodeID: ST_UANodeID;
	nNodeHdl: DWORD;
	fbUA_Read: UA_Read;
	stIndexRange: ARRAY[1..nMaxIndexRange] OF ST_UAIndexRange;
	nIndexRangeCount: UINT;
	stNodeAddInfo: ST_UANodeAdditionalInfo;
	Variable: ARRAY[1..nMaxReadData] OF BYTE;
	///DINT; 		// change the data type according to the variable type to be read
	nReadData: STRING;
	fbUA_NodeReleaseHandle: UA_NodeReleaseHandle;
	fbUA_Disconnect: UA_Disconnect;
	iState: INT;
	bTest: BOOL := TRUE;
	bDone: BOOL;
	bBusy: BOOL;
	bError: BOOL;
	nErrorID: DWORD;
	nLoopVars: UINT;
	counter: UDINT;
	a: ARRAY[1..nMaxReadDataArray] OF BYTE;
	b: ARRAY[1..nMaxReadDataArray] OF BYTE;
	a_: BYTE;
	b_: BYTE;
	nTmpL: UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iState OF
0:	(* idle *)
	IF bTest THEN
		bTest		:= FALSE;
		bError		:= FALSE;
		nErrorID	:= 0;
		bBusy 		:= TRUE; 
		SessionConnectInfo.tConnectTimeout 		:= T#9S;
		SessionConnectInfo.tSessionTimeout 		:= T#9S;
		SessionConnectInfo.sApplicationName		:= '';
		SessionConnectInfo.sApplicationUri 		:= '';
		SessionConnectInfo.eSecurityMode 		:= eUASecurityMsgMode_None;
		SessionConnectInfo.eSecurityPolicyUri 	:= eUASecurityPolicy_None;
		SessionConnectInfo.eTransportProfileUri := eUATransportProfileUri_UATcp;

		stNodeAddInfo.nIndexRangeCount := nIndexRangeCount;
		stNodeAddInfo.stIndexRange := stIndexRange;
		iState	:= iState + 1;
	END_IF

1:	(* open UA session *)
	fbUA_Connect(
		Execute				:= TRUE,
		ServerURL			:= GVL_ScalarTests.sOpcUA_URL,
		SessionConnectInfo	:= SessionConnectInfo,
		Timeout				:= T#10S,
		ConnectionHdl		=> nConnectionHdl
	);

	IF NOT fbUA_Connect.Busy THEN
		fbUA_Connect(Execute := FALSE);

		IF NOT fbUA_Connect.Error THEN
			(* session open *)
			iState := iState + 1;
		ELSE
			bError			:= TRUE;
			nErrorID		:= fbUA_Connect.ErrorID;
			nConnectionHdl	:= 0;
			iState 			:= 0; (* idle *)
		END_IF
	END_IF


2:	(* GetNS Index *)
	fbUA_GetNamespaceIndex(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		NamespaceUri	:= GVL_ScalarTests.sNodeIDNamespace,
		NamespaceIndex	=> nNamespaceIndex
	);

	IF NOT fbUA_GetNamespaceIndex.Busy THEN
		fbUA_GetNamespaceIndex(Execute := FALSE);

		IF NOT fbUA_GetNamespaceIndex.Error THEN
			(* session closed *)
			iState 		:= iState + 1; (* idle *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_GetNamespaceIndex.ErrorID;
			iState 		:= 6; (* idle *)
		END_IF
	END_IF


3:	(* Get Node Handle *)
	NodeID.eIdentifierType := eUAIdentifierType_String;
	NodeID.nNamespaceIndex := nNamespaceIndex;
	NodeID.sIdentifier	:= GVL_ArrayTests.NodeID_Identifiers[nLoopVars]; // 'GVL_static.stat_BSTR_0';
	fbUA_NodeGetHandle(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		NodeID			:= NodeID,
		NodeHdl			=> nNodeHdl
	);

	IF NOT fbUA_NodeGetHandle.Busy THEN
		fbUA_NodeGetHandle(Execute := FALSE);

		IF NOT fbUA_NodeGetHandle.Error THEN
			(* session closed *)
			iState 		:= iState + 1; (* idle *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_NodeGetHandle.ErrorID;
			iState 		:= 6; (* idle *)
		END_IF
	END_IF


4: 	(* UA_Read *)
	fbUA_Read(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		NodeHdl			:= nNodeHdl,
		stNodeAddInfo 	:= stNodeAddInfo,
		cbData			:= GVL_ArrayTests.NodeID_Sizes[nLoopVars], //SIZEOF(nReadData),		
		pVariable		:= ADR(GVL_ArrayTests.NodeID_ReadWrittenResults[nLoopVars].nData) //Variable
		);

	IF NOT fbUA_Read.Busy THEN
		fbUA_Read(
			Execute 	:= FALSE);

		IF NOT fbUA_Read.Error THEN
			(* session closed *)
			iState 		:= iState + 1; (* idle *)
			a := GVL_ArrayTests.NodeID_WriteCommands[nLoopVars].nData;
			b := GVL_ArrayTests.NodeID_ReadWrittenResults[nLoopVars].nData;
			FOR counter:=1 TO fbUA_Read.cbData_R //fbUA_Read.GVL_ScalarTests.NodeID_Sizes[nLoopVars]
			DO
				a_ := a[counter];
				b_ := b[counter];
				IF(NOT a_ = b_) THEN
					EXIT;
				END_IF
			END_FOR
			IF(Counter = fbUA_Read.cbData_R+1) THEN //GVL_ScalarTests.NodeID_Sizes[nLoopVars]+1) THEN //all bytes are equal as long as length site is defined
				GVL_ArrayTests.NodeID_CheckReadWrite[nLoopVars] := TRUE;
			END_IF 
			//Do we need this? We simply store in UNION! MEMCPY(ADR(nReadData),ADR(Variable),SIZEOF(nReadData));
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_Read.ErrorID;
			iState 		:= 7; (* idle *)
		END_IF
	END_IF



5:	(* Release Node Handle *)
	fbUA_NodeReleaseHandle(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl,
		NodeHdl			:= nNodeHdl
	);

	IF NOT fbUA_NodeReleaseHandle.Busy THEN
		fbUA_NodeReleaseHandle(Execute := FALSE);

		IF NOT fbUA_NodeReleaseHandle.Error THEN
			(* session closed *)
			iState 		:= iState + 1; (* idle *)
		ELSE
			bError		:= TRUE;
			nErrorID	:= fbUA_NodeReleaseHandle.ErrorID;
			iState 		:= 6; (* idle *)
		END_IF
	END_IF


6:	(* close session *)
	fbUA_Disconnect(
		Execute			:= TRUE,
		ConnectionHdl	:= nConnectionHdl
	);

	IF NOT fbUA_Disconnect.Busy THEN
		fbUA_Disconnect(Execute := FALSE);

		IF NOT fbUA_Disconnect.Error THEN
			(* session closed *)
			iState 		:= 0; (* idle *)
			//restart with next var, if existing in array
			IF(nLoopVars < nEndOfNodeIDVars) THEN
				nLoopVars := nLoopVars+1;
				bTest := TRUE;
			ELSE 
				bBusy 		:= FALSE;
				//prepare for next call 
				bTest := TRUE;
				nLoopVars := 0;
			END_IF
		ELSE
			bError			:= TRUE;
			nErrorID		:= fbUA_Disconnect.ErrorID;
			iState 			:= 0; (* idle *)
			nConnectionHdl	:= 0;
		END_IF
	END_IF
END_CASE
]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>